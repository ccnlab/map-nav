// Code generated by go-bindata. DO NOT EDIT.
// sources:
// linemaze.tsv
// openfield.tsv

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataLinemazetsv = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\x31\xcb\xc2\x30\x10\x86\xe7\x7c\xbf\xe3\x73\xcb\x90\xbb\x38\x15" +
	"\x29\x74\x10\x71\xd1\xc1\x51\x42\x08\x25\x83\x50\x53\x87\x8b\xbf\x5f\xd4\x82\x31\xd7\x2b\x72\x10\x48\xde\xf7\x79" +
	"\xc8\xfd\x1f\xc2\x35\xaa\x55\xd7\x53\x0e\xc3\x89\x02\x45\xbf\x4f\xb7\x4c\x67\x6c\x8c\x36\x6e\x83\x8d\xd5\xb6\x95" +
	"\x0a\xe0\xa4\x04\x85\x04\xb4\x11\x13\xc9\x06\xa2\x0d\x45\x1b\x8a\x36\x7c\xd9\x76\x63\x18\xe6\x37\xad\x12\xe0\x65" +
	"\xc6\xbf\x97\xaa\x9e\x18\x08\x1c\x44\x0e\x22\x07\xb1\xd8\xbf\xeb\xe9\x32\x26\x7f\xcc\xf4\xf5\x75\xd0\xeb\x56\xae" +
	"\xc0\x02\xbe\xa4\xb6\xee\x6f\x7b\x8f\x89\xbc\x51\xe5\x80\x32\x6c\xe0\x73\x4e\x4c\xdd\x92\xa8\x92\x41\xc1\x3b\x77" +
	"\x87\x89\xb1\x3f\x13\x4f\xe6\x11\x00\x00\xff\xff\xdb\x54\xac\x85\xf0\x02\x00\x00")

func bindataLinemazetsvBytes() ([]byte, error) {
	return bindataRead(
		_bindataLinemazetsv,
		"linemaze.tsv",
	)
}



func bindataLinemazetsv() (*asset, error) {
	bytes, err := bindataLinemazetsvBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "linemaze.tsv",
		size: 752,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1580770591, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataOpenfieldtsv = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x41\x4b\xc4\x30\x10\x85\xcf\xf5\x77\xe8\x2d\x87\xcc\xa4\xbb\xee" +
	"\x2e\xb2\xd0\x83\x88\x17\x3d\x78\x94\x52\x42\xe9\x41\xa8\xad\x87\xd4\xdf\x2f\x58\xc2\x26\x99\x4c\x32\x04\x96\x4d" +
	"\x66\xbe\xc7\x7b\x33\xbd\x7f\xb3\xdf\x53\xf3\xd0\x8d\x6e\xb3\xf3\x87\xb3\x6e\x1a\x5e\x97\x9f\xcd\x7d\xe2\x45\x2b" +
	"\xdd\x3f\xe1\xc5\x28\x73\xe5\x1a\xa0\xe7\x2a\xc8\x54\x40\x69\xb6\xc2\xa9\x01\xab\x86\xac\x1a\xb2\x6a\xf8\xaf\xf6" +
	"\xb2\xda\x39\x9f\x34\xa9\x00\x6d\x26\xfc\x1e\x2a\x79\x22\x20\x50\x10\x29\x88\x14\xc4\x20\x7f\x37\xba\xaf\x75\x19" +
	"\xde\x37\x17\x59\x07\xd5\x5e\xf9\x16\x28\xe0\x25\x69\xd3\xdf\x3d\xff\x4e\x8b\x1b\xb4\x6e\xc2\x03\x8d\x26\x07\x6e" +
	"\xbf\x1e\x4a\xdb\x38\x2c\x82\x90\x51\xce\xdd\xc1\x43\x46\x8c\x04\x50\x5b\x4d\xa3\x69\xa6\x83\x60\x08\x04\x3a\x0a" +
	"\xad\x45\xf6\x1e\xc5\x48\x00\x9d\xaa\x69\x32\xf6\xce\x82\x21\xa4\x10\x48\xad\x85\xf6\x00\xc4\x48\x00\x61\x79\x33" +
	"\xf1\xdd\x43\x46\xd0\x4e\xa0\x96\x37\x43\xff\x7b\xe8\x50\xcb\x91\x83\x8e\x75\x7d\x6a\x2f\xff\x45\x30\x9b\xf3\xd0" +
	"\xa9\x6a\x2d\x63\xef\x5c\xdf\x0e\x81\x50\x34\xb5\xc4\x1e\x16\x5a\xd8\x4c\x88\x82\x81\x13\x7b\xa6\x32\xb3\xfd\xdd" +
	"\x43\x7f\x01\x00\x00\xff\xff\xc5\x27\x98\x1e\x18\x07\x00\x00")

func bindataOpenfieldtsvBytes() ([]byte, error) {
	return bindataRead(
		_bindataOpenfieldtsv,
		"openfield.tsv",
	)
}



func bindataOpenfieldtsv() (*asset, error) {
	bytes, err := bindataOpenfieldtsvBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "openfield.tsv",
		size: 1816,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1580762624, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"linemaze.tsv":  bindataLinemazetsv,
	"openfield.tsv": bindataOpenfieldtsv,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"linemaze.tsv": {Func: bindataLinemazetsv, Children: map[string]*bintree{}},
	"openfield.tsv": {Func: bindataOpenfieldtsv, Children: map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
